<?php

namespace tests\codeception\math\unit;

use qubb\FixedPointMath\helpers\Rounder;

/**
 * work with bc math rounding
 *
 * @package tests\codeception\math\unit
 */
class RounderTest extends Codeception\TestCase\Test
{
    const CALCULATION_ADEQUACY = 8;

    public function setUp()
    {
        bcscale(self::CALCULATION_ADEQUACY);
    }

    /**
     * @return array
     */
    public function roundDataProvider()
    {
        /* [value, precision, floor hand result, round hand result, ceil hand result] */
        return [
            // positive values
            ['0.000001', 6, '0.000001', '0.000001', '0.000001'],
            ['0.000001', 5, '0', '0', '0.00001'],
            ['0.000001', 0, '0', '0', '1'],
            ['0.000005', 6, '0.000005', '0.000005', '0.000005'],
            ['0.000005', 5, '0', '0.00001', '0.00001'],
            ['0.00001', 5, '0.00001', '0.00001', '0.00001'],
            ['0.00005', 5, '0.00005', '0.00005', '0.00005'],
            ['0.00001', 4, '0', '0', '0.0001'],
            ['0.00005', 4, '0', '0.0001', '0.0001'],
            ['0.0001', 4, '0.0001', '0.0001', '0.0001'],
            ['0.0005', 4, '0.0005', '0.0005', '0.0005'],
            ['0.0001', 3, '0', '0', '0.001'],
            ['0.0005', 3, '0', '0.001', '0.001'],
            ['0.001', 3, '0.001', '0.001', '0.001'],
            ['0.005', 3, '0.005', '0.005', '0.005'],
            ['0.001', 2, '0', '0', '0.01'],
            ['0.005', 2, '0', '0.01', '0.01'],
            ['0.01', 2, '0.01', '0.01', '0.01'],
            ['0.05', 2, '0.05', '0.05', '0.05'],
            ['0.01', 1, '0', '0', '0.1'],
            ['0.05', 1, '0', '0.1', '0.1'],
            ['0.1', 1, '0.1', '0.1', '0.1'],
            ['0.5', 1, '0.5', '0.5', '0.5'],
            ['0.1', 0, '0', '0', '1'],

            ['0.999995', 6, '0.999995', '0.999995', '0.999995'],
            ['0.999995', 5, '0.99999', '1', '1'],
            ['0.99995', 4, '0.9999', '1', '1'],
            ['0.9995', 3, '0.999', '1', '1'],
            ['0.995', 2, '0.99', '1', '1'],
            ['0.95', 1, '0.9', '1', '1'],
            ['0.5', 0, '0', '1', '1'],

            ['9.999995', 6, '9.999995', '9.999995', '9.999995'],
            ['9.999995', 5, '9.99999', '10', '10'],
            ['9.99995', 4, '9.9999', '10', '10'],
            ['9.9995', 3, '9.999', '10', '10'],
            ['9.995', 2, '9.99', '10', '10'],
            ['9.95', 1, '9.9', '10', '10'],
            ['9.5', 0, '9', '10', '10'],

            ['1', 0, '1', '1', '1'],
            ['1.1', 0, '1', '1', '2'],
            ['1.5', 0, '1' ,'2', '2'],
            ['1.9', 0, '1', '2', '2'],
            ['1.95583', 2, '1.95', '1.96', '1.96'],
            ['1.95583', 3, '1.955', '1.956', '1.956'],
            ['1.95583', 4, '1.9558', '1.9558', '1.9559'],
            ['1.95585', 4, '1.9558', '1.9559', '1.9559'],
            ['3', 1, '3', '3', '3'],
            ['3', 0, '3', '3', '3'],
            ['3', -1, '0', '0', '10'],
            ['3.4', 0, '3', '3', '4'],
            ['3.5', 0, '3', '4', '4'],
            ['3.6', 0, '3', '4', '4'],
            ['4.245', 2, '4.24', '4.25', '4.25'],
            ['5.045', 2, '5.04', '5.05', '5.05'],
            ['5.055', 2, '5.05', '5.06', '5.06'],
            ['9.999', 2, '9.99', '10', '10'],
            ['9.999', 1, '9.9', '10', '10'],
            ['9.999', 0, '9', '10', '10'],
            ['9.999', -1, '0', '10', '10'],
            ['99.999', -1, '90', '100', '100'],
            ['400.000001', -1, '400', '400', '410'],
            ['430.000001', 0, '430', '430', '431'],
            ['430', -1, '430', '430', '430'],
            ['430.5', 0, '430', '431', '431'],
            ['434', -1, '430', '430', '440'],
            ['434', -2, '400', '400', '500'],
            ['435', -1, '430', '440', '440'],
            ['435.000001', 0, '435', '435', '436'],
            ['455', -2, '400', '500', '500'],

            // negative values
            ['-0.000001', 6, '-0.000001', '-0.000001', '-0.000001'],
            ['-0.000001', 5, '-0.00001', '0', '0'],
            ['-0.000001', 0, '-1', '0', '0'],
            ['-0.000005', 6, '-0.000005', '-0.000005', '-0.000005'],
            ['-0.000005', 5, '-0.00001', '-0.00001', '0'],
            ['-0.00001', 5, '-0.00001', '-0.00001', '-0.00001'],
            ['-0.00005', 5, '-0.00005', '-0.00005', '-0.00005'],
            ['-0.00001', 4, '-0.0001', '0', '0'],
            ['-0.00005', 4, '-0.0001', '-0.0001', '0'],
            ['-0.0001', 4, '-0.0001', '-0.0001', '-0.0001'],
            ['-0.0005', 4, '-0.0005', '-0.0005', '-0.0005'],
            ['-0.0001', 3, '-0.001', '0', '0'],
            ['-0.0005', 3, '-0.001', '-0.001', '0'],
            ['-0.001', 3, '-0.001', '-0.001', '-0.001'],
            ['-0.005', 3, '-0.005', '-0.005', '-0.005'],
            ['-0.001', 2, '-0.01', '0', '0'],
            ['-0.005', 2, '-0.01', '-0.01', '0'],
            ['-0.01', 2, '-0.01', '-0.01', '-0.01'],
            ['-0.05', 2, '-0.05', '-0.05', '-0.05'],
            ['-0.01', 1, '-0.1', '0', '0'],
            ['-0.05', 1, '-0.1', '-0.1', '0'],
            ['-0.1', 1, '-0.1', '-0.1', '-0.1'],
            ['-0.5', 1, '-0.5', '-0.5', '-0.5'],
            ['-0.1', 0, '-1', '0', '0'],

            ['-0.999995', 6, '-0.999995', '-0.999995', '-0.999995'],
            ['-0.999995', 5,   '-1', '-1', '-0.99999'],
            ['-0.99995', 4,   '-1', '-1', '-0.9999'],
            ['-0.9995', 3,   '-1', '-1', '-0.999'],
            ['-0.995', 2,   '-1', '-1', '-0.99'],
            ['-0.95', 1,  '-1', '-1', '-0.9'],
            ['-0.5', 0, '-1', '-1', '0'],

            ['-9.999995', 6, '-9.999995', '-9.999995', '-9.999995'],
            ['-9.999995', 5,   '-10', '-10', '-9.99999'],
            ['-9.99995', 4,   '-10', '-10', '-9.9999'],
            ['-9.9995', 3,   '-10', '-10', '-9.999'],
            ['-9.995', 2,   '-10', '-10', '-9.99'],
            ['-9.95', 1,  '-10', '-10', '-9.9'],
            ['-9.5', 0, '-10', '-10', '-9'],

            ['-1', 0, '-1', '-1', '-1'],
            ['-1.1', 0, '-2', '-1', '-1'],
            ['-1.5', 0, '-2', '-2', '-1'],
            ['-1.9', 0,  '-2', '-2', '-1'],
            ['-1.95583', 2, '-1.96', '-1.96', '-1.95'],
            ['-1.95583', 3, '-1.956', '-1.956', '-1.955'],
            ['-1.95583', 4, '-1.9559', '-1.9558', '-1.9558'],
            ['-1.95585', 4, '-1.9559', '-1.9559', -'1.9558'],
            ['-3', 1, '-3', '-3', '-3'],
            ['-3', 0, '-3', '-3', '-3'],
            ['-3', -1, '-10', '0', '0'],
            ['-3.4', 0, '-4', '-3', '-3'],
            ['-3.5', 0, '-4', '-4', '-3'],
            ['-3.6', 0, '-4', '-4', '-3'],
            ['-4.245', 2, '-4.25', '-4.25', '-4.24'],
            ['-4.245', 2, '-4.25', '-4.25', '-4.24'],
            ['-5.045', 2, '-5.05', '-5.05', '-5.04'],
            ['-5.055', 2, '-5.06', '-5.06', '-5.05'],
            ['-9.999', 2, '-10', '-10', '-9.99'],
            ['-9.999', 1, '-10', '-10', '-9.9'],
            ['-9.999', 0, '-10', '-10', '-9'],
            ['-9.999', -1, '-10', '-10', '0'],
            ['-99.999', -1, '-100', '-100', '-90'],
            ['-400.000001', -1, '-410', '-400', '-400'],
            ['-430.000001', 0, '-431', '-430', '-430'],
            ['-430', -1, '-430', '-430', '-430'],
            ['-430.5', 0, '-431', '-431', '-430'],
            ['-434', -1, '-440', '-430', '-430'],
            ['-434', -2, '-500', '-400', '-400'],
            ['-435', -1, '-440', '-440', '-430'],
            ['-435.000001', 0, '-436', '-435', '-435'],
            ['-455', -2, '-500', '-500', '-400'],
        ];
    }

    /**
     * @test
     * @dataProvider roundDataProvider
     * @param $value
     * @param $precision
     * @param $floorResult
     * @param $roundResult
     * @param $ceilResult
     */
    public function testCeilForBcMath($value, $precision, $floorResult, $roundResult, $ceilResult)
    {
        $roundedFloatingValue = $this->ceilFloat($value, $precision);
        $roundedValue = Rounder::ceil($value, $precision);
        $this->assertEquals($roundedValue, $ceilResult, 'try to ceil ' . $value . ', precision ' . $precision
            . ', bcceil ' . $roundedValue . ', floating ceil ' . $roundedFloatingValue . ', hand ceil ' . $ceilResult);
    }

    /**
     * @test
     * @dataProvider roundDataProvider
     * @param $value
     * @param $precision
     * @param $floorResult
     * @param $roundResult
     * @param $ceilResult
     */
    public function testFloorForBcMath($value, $precision, $floorResult, $roundResult, $ceilResult)
    {
        $roundedFloatingValue = $this->floorFloat($value, $precision);
        $roundedValue = Rounder::floor($value, $precision);
        $this->assertEquals($roundedValue, $floorResult, 'try to floor ' . $value . ', precision ' . $precision
            . ', bcfloor ' . $roundedValue . ', floating floor ' . $roundedFloatingValue . ', hand floor ' . $floorResult);
    }

    /**
     * @test
     * @dataProvider roundDataProvider
     * @param $value
     * @param $precision
     * @param $floorResult
     * @param $roundResult
     * @param $ceilResult
     */
    public function testRoundForBcMath($value, $precision, $floorResult, $roundResult, $ceilResult)
    {
        $roundedFloatingValue = round($value, $precision);
        $roundedValue = Rounder::round($value, $precision);
        $this->assertEquals($roundedValue, $roundResult, 'try to round ' . $value . ', precision ' . $precision
            . ', bcround ' . $roundedValue . ', floating round ' . $roundedFloatingValue . ', hand round ' . $roundResult);
    }


    /**
     * @param $value
     * @param int $precision
     * @return float
     */
    private function ceilFloat($value, $precision = 0)
    {
        $precisionMultiplier = pow(10, $precision);
        $roundedAmount = ceil($value * $precisionMultiplier) / $precisionMultiplier;
        return $roundedAmount;
    }

    /**
     * @param $value
     * @param int $precision
     * @return mixed
     */
    private function floorFloat($value, $precision = 0)
    {
        $precisionMultiplier = pow(10, $precision);
        $roundedAmount = floor($value * $precisionMultiplier) / $precisionMultiplier;
        return $roundedAmount;
    }
}

